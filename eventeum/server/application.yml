server:
  tomcat:
    uri-encoding: UTF-8
  port: 8060

logging:
  level:
    org.springframework.web: ERROR
    net.consensys: DEBUG
    net.consensys.configs: ERROR
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5p %c: %M - %m%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5p %c: %M - %m%n"
  file: /logs/application.log

ethereum:
  nodes:
    - name: default
      url: https://data-seed-prebsc-1-s1.binance.org:8545/
      pollingInterval: ${POLLING_INTERVAL:10000}

#url: http://localhost:8545

  healthcheck:
    pollInterval: 2000


eventFilters:
  - id: mint
    contractAddress: ${CONTRACT_ADDRESS:0xd31dd5ac96c39ad0d938d9589776e6940919d714}
    eventSpecification:
      eventName: mint
      indexedParameterDefinitions:
        - position: 0
          type: ADDRESS
        - position: 1
          type: UINT256


eventFilters:
  - id: RequestCreated
    contractAddress: ${CONTRACT_ADDRESS:0xd31dd5ac96c39ad0d938d9589776e6940919d714}
    eventSpecification:
      eventName: RequestCreated
      indexedParameterDefinitions:
        - position: 0
          type: BYTES32
       - position: 1
          type: ADDRESS
      nonIndexedParameterDefinitions:
        - position: 2
          type: BYTES32
    correlationId:
      type: NON_INDEXED_PARAMETER
      index: 0

#transactionFilters:
#- nodeName: ${ETHEREUM_NETWORK:default}
#  type: "FROM_ADDRESS"
#  transactionIdentifierValue: ${CONTRACT_ADDRESS_EM_TOKEN:0xd31dd5ac96c39ad0d938d9589776e6940919d714}
#  statuses: ['CONFIRMED']
#- nodeName: ${ETHEREUM_NETWORK:default}
#  type: "TO_ADDRESS"
#  transactionIdentifierValue: ${CONTRACT_ADDRESS_EM_TOKEN:0xd31dd5ac96c39ad0d938d9589776e6940919d714}
#  statuses: ['FAILED']


#  url: http://localhost:8081/api/rest/v1
eventStore:
  type: DB
  url: http://host.docker.internal:8081/api/rest/v1
  eventPath: /event




database:
  type: MONGO
# type: SQL

broadcaster:
  type: HTTP
  cache:
    expirationMillis: 6000000
  event:
    confirmation:
      numBlocksToWait: 12
      numBlocksToWaitForMissingTx: 100
      numBlocksToWaitBeforeInvalidating: 2
  multiInstance: false
  bytesToAscii: false

broadcaster_http:
  contracteventsurl: http://host.docker.internal:3000

# For Kafka
zookeeper:
  address: ${ZOOKEEPER_ADDRESS:localhost:2181}
kafka:
  bootstrap:
    addresses: ${KAFKA_ADDRESSES:localhost:9092}
  topic:
    contractEvents: contract-events
    blockEvents: block-events
    eventeumEvents: eventeum-events
  request:
    timeout:
      msConfig: ${KAFKA_REQUEST_TIMEOUT_MS:20000}
  retry:
    backoff:
      msConfig: ${KAFKA_RETRY_BACKOFF_MS:500}
  endpoint:
    identification:
      algorithm: ${KAFKA_ENDPOINT_IDENTIFICATION_ALGORITHM:null}
  sasl:
    mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
    username: ${KAFKA_USERNAME:""}
    password: ${KAFKA_PASSWORD:""}
  security:
    protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
  retries: ${KAFKA_RETRIES:10}
